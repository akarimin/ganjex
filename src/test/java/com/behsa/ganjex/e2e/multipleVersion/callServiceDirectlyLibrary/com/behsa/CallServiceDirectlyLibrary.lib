package com.behsa;

import com.behsa.ganjex.api.ServiceContext;
import com.behsa.ganjex.api.ShutdownHook;
import com.behsa.ganjex.api.StartupHook;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

public class CallServiceDirectlyLibrary {
	private static Map<ServiceInfo, ServiceContext> contextMap = new ConcurrentHashMap<>();

	public static long serviceCount(String name) {
		return (long) contextMap.entrySet().stream().filter(s -> s.getKey().name.equals(name))
						.count();
		//findAny().get().getValue().getVersion()
	}

	public static int getVersion(String name, Integer version) throws ClassNotFoundException,
					NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
		contextMap.keySet().forEach(System.out::println);
		ServiceInfo serviceInfo = new ServiceInfo(name, version);
		if(!contextMap.containsKey(serviceInfo))
			return -1;
		Class<?> versionServiceClass = contextMap.get(serviceInfo)
						.getClassLoader().loadClass("com.behsa.VersionService");
		Constructor<?> versionServiceConstructor = versionServiceClass.getConstructor((Class<?>[]) null);
		Object versionServiceObj = versionServiceConstructor.newInstance((Object[]) null);
		Method getVersionMethod = versionServiceClass.getMethod("getVersion", (Class<?>[]) null);
		return (int) getVersionMethod.invoke(versionServiceObj, (Object[]) null);
	}

	@StartupHook
	public void startService(ServiceContext context) {
		System.out.println("start service " + context);
		contextMap.put(new ServiceInfo(context), context);
	}

	@ShutdownHook
	public void shutdownService(ServiceContext context) {
		System.out.println("shutdown service " + context);
		contextMap.remove(new ServiceInfo(context));
	}

	private static class ServiceInfo {
		private final String name;
		private final int version;

		private ServiceInfo(ServiceContext context) {
			this.name = context.getName();
			this.version = context.getVersion();
		}

		public ServiceInfo(String name, int version) {
			this.name = name;
			this.version = version;
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			ServiceInfo that = (ServiceInfo) o;
			return version == that.version &&
							Objects.equals(name, that.name);
		}

		@Override
		public int hashCode() {
			return Objects.hash(name, version);
		}

		@Override
		public String toString() {
			return "ServiceInfo{" +
							"name='" + name + '\'' +
							", version=" + version +
							'}';
		}
	}
}